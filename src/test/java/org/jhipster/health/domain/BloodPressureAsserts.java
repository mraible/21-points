package org.jhipster.health.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static org.jhipster.health.domain.AssertUtils.zonedDataTimeSameInstant;

public class BloodPressureAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBloodPressureAllPropertiesEquals(BloodPressure expected, BloodPressure actual) {
        assertBloodPressureAutoGeneratedPropertiesEquals(expected, actual);
        assertBloodPressureAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBloodPressureAllUpdatablePropertiesEquals(BloodPressure expected, BloodPressure actual) {
        assertBloodPressureUpdatableFieldsEquals(expected, actual);
        assertBloodPressureUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBloodPressureAutoGeneratedPropertiesEquals(BloodPressure expected, BloodPressure actual) {
        assertThat(expected)
            .as("Verify BloodPressure auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBloodPressureUpdatableFieldsEquals(BloodPressure expected, BloodPressure actual) {
        assertThat(expected)
            .as("Verify BloodPressure relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getTimestamp())
                        .as("check timestamp")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getTimestamp())
            )
            .satisfies(e -> assertThat(e.getSystolic()).as("check systolic").isEqualTo(actual.getSystolic()))
            .satisfies(e -> assertThat(e.getDiastolic()).as("check diastolic").isEqualTo(actual.getDiastolic()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBloodPressureUpdatableRelationshipsEquals(BloodPressure expected, BloodPressure actual) {}
}
