package org.jhipster.health.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PointsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointsAllPropertiesEquals(Points expected, Points actual) {
        assertPointsAutoGeneratedPropertiesEquals(expected, actual);
        assertPointsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointsAllUpdatablePropertiesEquals(Points expected, Points actual) {
        assertPointsUpdatableFieldsEquals(expected, actual);
        assertPointsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointsAutoGeneratedPropertiesEquals(Points expected, Points actual) {
        assertThat(expected)
            .as("Verify Points auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointsUpdatableFieldsEquals(Points expected, Points actual) {
        assertThat(expected)
            .as("Verify Points relevant properties")
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getExercise()).as("check exercise").isEqualTo(actual.getExercise()))
            .satisfies(e -> assertThat(e.getMeals()).as("check meals").isEqualTo(actual.getMeals()))
            .satisfies(e -> assertThat(e.getAlcohol()).as("check alcohol").isEqualTo(actual.getAlcohol()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointsUpdatableRelationshipsEquals(Points expected, Points actual) {}
}
